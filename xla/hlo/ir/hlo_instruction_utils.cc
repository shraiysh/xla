/* Copyright 2024 The OpenXLA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#include "xla/hlo/ir/hlo_instruction_utils.h"

#include <cstdint>

#include "absl/algorithm/container.h"
#include "xla/hlo/ir/hlo_instruction.h"
#include "xla/hlo/ir/hlo_opcode.h"
#include "xla/service/pattern_matcher.h"

namespace xla {
namespace hlo_instruction_utils {

namespace m = ::xla::match;

bool IsUnstridedSlice(const HloInstruction* hlo) {
  if (hlo->opcode() != HloOpcode::kSlice) {
    return false;
  }
  return absl::c_all_of(hlo->slice_strides(),
                        [](int64_t stride) { return stride == 1; });
}

using Interval = std::pair<int64_t, int64_t>;
void AddOrUpdateVectorOfPairsAsAttribute(HloInstruction* instr,
                                         std::string attr_name,
                                         std::vector<Interval> intervals) {
  std::string intervals_str =
      "{" +
      absl::StrJoin(intervals, ",",
                    [](std::string* out, Interval item) {
                      absl::StrAppend(out, "{", item.first, ",", item.second,
                                      "}");
                    }) +
      "}";
  FrontendAttributes attributes;
  attributes.CopyFrom(instr->frontend_attributes());
  (*attributes.mutable_map())[attr_name] = intervals_str;
  instr->set_frontend_attributes(attributes);
}

// Returns true if `offset` is a loop iteration number. This pattern matching
// detects HLOs that generated by `jax.lax.scan` and will miss slightly
// different patterns that still compute slice offset as loop iteration number.
bool IsLoopIterationNumber(const HloInstruction* idx) {
  const HloComputation* parent = idx->parent();
  if (!parent->IsWhileBodyComputation()) return false;

  // Scan loops trip count must be known at compile time as it iterates over the
  // leading dimension of the statically shaped input.
  const HloInstruction* while_instr = parent->WhileCallInstruction();
  auto config = while_instr->backend_config<xla::WhileLoopBackendConfig>();
  if (!config.ok() || !config->has_known_trip_count()) {
    VLOG(2) << "While loop trip count not found";
    return false;
  }
  int32_t trip_count = config->known_trip_count().n();

  // Check that offset is defined by a loop fusion that computes offset
  // from the loop iteration number.
  if (!idx->IsLoopFusion() ||
      !Match(
          idx->fused_expression_root(),
          m::Select(m::Lt(m::Parameter(0), m::ConstantScalar<int32_t>(0)),
                    m::Add(m::Parameter(0), m::ConstantScalar(trip_count)),
                    m::Parameter(0)))) {
    VLOG(2) << "Pattern matching for offset computation failed.";
    return false;
  }

  // Check that we get loop iteration directly from loop parameters bundle.
  HloInstruction* get_loop_iteration;
  if (!Match(const_cast<HloInstruction*>(idx->operand(0)),
             m::GetTupleElement(&get_loop_iteration, m::Parameter(0)))) {
    VLOG(2) << "Pattern matching for offset computation input failed - must be loop induction variable";
    return false;
  }
  int32_t loop_iter_idx = get_loop_iteration->tuple_index();

  // Check that loop iteration counter updated with a +1 fusion.
  const HloInstruction* loop_inc =
      parent->root_instruction()->operand(loop_iter_idx);
  if (!loop_inc->IsLoopFusion() ||
      !Match(loop_inc->fused_expression_root(),
             m::Add(m::Parameter(0), m::ConstantScalar<int32_t>(1)))) {
    VLOG(2) << "Pattern matching for update computation failed.";
    return false;
  }

  VLOG(2) << idx->name() << " is a loop iteration offset";

  return true;
}

}  // namespace hlo_instruction_utils
}  // namespace xla
